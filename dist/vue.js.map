{"version":3,"file":"vue.js","sources":["../src/compiler/parse.js","../src/compiler/index.js","../src/utils.js","../src/globalAPI.js","../src/observe/array.js","../src/observe/dep.js","../src/observe/index.js","../src/observe/watcher.js","../src/state.js","../src/vdom/index.js","../src/vdom/patch.js","../src/lifecycle.js","../src/init.js","../src/index.js"],"sourcesContent":["// 标签名：第一个字符+后面的字符；第一个字符不能以数字开头\n// 字符串的两个\\\\是什么？表示转义，字符串中的转义，前一个\\表示转义后面的\\\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`;\n// (?:${ncname}\\\\:)?\n// 第一个?:表示匹配但是不记住匹配项；\n// 为啥不要记住匹配性，因为需要加()分组后表示前面一半是命名空间可有可无，但是又不想铺获$1的值\n// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_expressions#special-non-capturing-parentheses\n// (?:${ncname}\\\\:)? 第二个？表示可有可无\n// 外面的分组\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;\n\n// 注意前面的开头^，必须是开始匹配\n// <1_xxx 不能以数字开头\n// <_xxx 自定义标签，都是以_开头 webcomponent\n// <xxx\n// <namespace:yyy 命名空间\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 标签开头的正则 捕获的内容是标签名\n// console.log(startTagOpen);\n\n// 注意前面的开头^，必须是开始匹配\n// 匹配到的是</xxx>\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配标签结尾的 </div>\n// console.log(endTag);\n\n// 注意前面的开头^，必须是开始匹配\n// a=b 没有空格\n// a = b =前后有空格\n// <xx a = b a前面也有空格\n// ([^\\s\"'<>\\/=]+)表示前面的属性名或者属性值，除了\"'<>那些字符都可以的字符\n// <xxx disabled disabled属性只有前面的部分没有后面的部分（=xxx）\n// (?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))? 第一个()为了后面加？表示属性值可有可无\n// \"([^\"]*)\"+ 以双引号包的非\"的多个字符 <xx a = \"b\" 左边双引号右边双引号中间不是双引号就可以\n// '([^']*)'+ 以单引号包的非'的多个字符 <xx a = 'b' 左边单引号右边单引号中间不是单引号就可以\n// ([^\\s\"'=<>`]+) 除了\\s\"'=<>`的任意多个字符  <xx a = b 属性也可以不加单引号或者双引号\nconst attribute =\n  /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性的\n// 第一个分组就是属性的key value就是分组3/分组4/分组5\n// console.log(attribute);\n\n// 注意前面的开头^，必须是开始匹配\n// <div> <br/> 标签结束可能是> 也可能是/>\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结束的 >\n\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g; // {{aaaaaa}} 匹配到的时候表达式的变量\n\n// 对模版进行编译\n// vue3不是采用的正则匹配了，是一个一个字符匹配\n// 思路： 每解析一个标签就删除一个标签，每解析一个属性就删除一个属性；字符串被截取完了就结束了\nexport function parseHTML(html) {\n  // 抽象语法树\n  /*\n  {\n    tag:'div',\n    type:1,\n    children:[{tag:'span',type:1,attrs:[],parent:'div对象'}],\n    attrs:[{name:'zf',age:10}],\n    parent:null\n  }\n*/\n\n  // 用于存放元素的栈，利用栈来创建一棵树\n  let stack = [];\n  // 节点类型-标签类型\n  const ELEMENT_TYPE = 1;\n  // 节点类型-文本类型\n  const TEXT_TYPE = 3;\n  // 根节点\n  let root;\n  // 指向栈中最后一个元素\n  let currentParent;\n\n  function createASTElement(tagName, attrs) {\n    return {\n      tag: tagName,\n      type: ELEMENT_TYPE,\n      children: [],\n      attrs,\n      parent: null,\n    };\n  }\n\n  // 开始标签 <div><span><a>text</a></span></div>\n  function start(tagName, attrs) {\n    // console.log(tagName, attrs);\n    // 创建一个ast节点\n    let element = createASTElement(tagName, attrs);\n    // 看下是否是空树\n    if (!root) {\n      // 如果为空树，当前节点是树的根节点\n      root = element;\n    }\n    // 进栈构建父子关系\n    // 放在end时候执行该逻辑也行\n    // if (currentParent) {\n    //   element.parent = currentParent;\n    //   currentParent.children.push(element);\n    // }\n    stack.push(element);\n    // currentParent为栈中的最后一个元素\n    currentParent = element;\n  }\n\n  // 结束标签\n  function end(tagName) {\n    // console.log(tagName);\n    // 当前标签结束就弹栈；弹出栈中的最后一个元素\n    let element = stack.pop();\n    // currentParent为栈中的最后一个元素\n    currentParent = stack[stack.length - 1];\n    // 出栈构建父子关系\n    // 放在start入栈的时候执行该逻辑也行\n    if (currentParent) {\n      // 当前标签结束的这个元素的parent就是栈中的最后一个元素\n      element.parent = currentParent;\n      // 栈中的最后一个元素的儿子就是当前弹栈弹出来的节点\n      currentParent.children.push(element);\n    }\n  }\n\n  // 文本；文本不需要放到栈中，文本直接放到currentParent节点的children中\n  function chars(text) {\n    // console.log(text);\n    // 去掉空，可以优化为如果空格超过2个就删除2个以上的空格\n    text = text.replace(/\\s/g, \"\");\n    // 不是节点直接的换行等空文本\n    if (text) {\n      // 文本节点直接放到当前栈的最后一个节点的children中，作为他的儿子\n      currentParent.children.push({\n        type: TEXT_TYPE,\n        text,\n        parent: currentParent,\n      });\n    }\n  }\n\n  // html字符串前进n个字符：例如截掉已经捕获到的开头标签名、属性名和属性值、结束标签\n  function advance(n) {\n    html = html.substring(n);\n  }\n\n  // 解析开始标签，包括解析标签名和所有属性\n  function parseStartTag() {\n    // 匹配开始标签名\n    const start = html.match(startTagOpen);\n    if (start) {\n      const match = {\n        tagName: start[1],\n        attrs: [],\n      };\n\n      // html字符串截掉tagName\n      // start[0] =>\n      advance(start[0].length);\n\n      // 捕获当前标签的所有属性\n      let attr, end;\n      // 当前捕获到了属性标签并且不是当前标签的结束\n      while (\n        !(end = html.match(startTagClose)) &&\n        (attr = html.match(attribute))\n      ) {\n        match.attrs.push({\n          name: attr[1],\n          value: attr[3] || attr[4] || attr[5],\n        });\n        // attr[0] => id=\"app\"\n        advance(attr[0].length);\n      }\n\n      // html字符当前到了当前标签的结束位置 > 或者 />\n      if (end) {\n        // 移除结束位置\n        advance(end[0].length);\n        // 返回匹配到的当前节点\n        return match;\n      }\n    }\n  }\n\n  // html字符串肯定是以<开头\n  while (html) {\n    let textEnd = html.indexOf(\"<\");\n    // <div>hello</div> indexOf等于0\n    // 如果textEnd为0，表明当前html字符串处于开始标签处或者结束标签处\n    // 如果textEnd大于0，表明当前html字符串处于文本节点或者空文本处，>处于文本节点的结束位置\n    if (textEnd === 0) {\n      // 如果indexOf的索引是0，则说明是一个开始标签或者结束标签\n      // 解析开始标签：<div a=b c=d>\n      const startTagMatch = parseStartTag();\n      if (startTagMatch) {\n        start(startTagMatch.tagName, startTagMatch.attrs);\n        // 继续解析当前标签下的子开头标签\n        // 例如<div a=b c=d><span>txt</span></div>中的下一个标签是<span>\n        continue;\n      }\n\n      // 解析到最深的子节点的结束标签\n      // 例如<div a=b c=d><span>txt</span></div>中的</span>\n      const endTagMatch = html.match(endTag);\n      if (endTagMatch) {\n        advance(endTagMatch[0].length);\n        end(endTagMatch[1]);\n        continue;\n      }\n      // 先让他暂停\n      // break;\n    }\n\n    // 当前html字符串处于文本标签处，因为结束标签>的index>0\n    // 标签中的空格也是文本\n    // <div a=b c=d>\n    //    <span>txt</span>\n    // </div>\n    // hello</div> indexOf大于0 说明是文本\n    let text;\n    if (textEnd > 0) {\n      text = html.substring(0, textEnd);\n    }\n    if (text) {\n      advance(text.length);\n      chars(text);\n    }\n  }\n\n  // html为空\n  // console.log(\"html\", html);\n  // root\n  // console.log(\"root\", root);\n\n  return root;\n}\n","import { parseHTML } from \"./parse\";\n\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g; // {{aaaaaa}} 匹配到的时候表达式的变量\n\n/**\n *\n *  <div style=\"color:red\">hello {{name}} <span></span></div>\n *  render(){\n *    return _c('div',{style:{color:'red'}},_v('hello'+_s(name) + 'age' + _s(age)),_c('span',undefined,''))\n *  }\n */\n\n// 如果是文本就创建文本节点；如果是标签元素就调用codegen\nfunction gen(node) {\n  // 标签类型\n  if (node.type == 1) {\n    return codegen(node);\n  } else {\n    // 文本类型节点\n    let text = node.text;\n    // 纯文本类型\n    if (!defaultTagRE.test(text)) {\n      return `_v(${JSON.stringify(text)})`;\n    }\n    // 包含{{}}的类型\n    // 变量name需要转成字符串_s(name) 用+拼接\n    // {{name}} hello {{name}} => _v(_s(name) + 'hello' + _s(name))\n    // console.log(\"文本节点：\", text);\n\n    let tokens = [];\n    let match;\n    // exec方法的特殊点：\n    // 现象：当正则表达式里面有g的时候，连续执行两次结果不一样: let reg = /a/g; reg.exec('abc'); reg.exec('abc');\n    // 原因：执行完一次后 reg.lastIndex变成1了，从第一个字符再往后找就找不到了\n    // 解决方法：每次重新执行exec的时候需要把reg.lastIndex重置为0\n    defaultTagRE.lastIndex = 0;\n    // 记录上一个匹配内容后的位置，算上字符串本身的长度\n    let lastIndex = 0;\n    while ((match = defaultTagRE.exec(text))) {\n      // console.log(\"match\", match);\n      // 匹配的位置\n      let index = match.index;\n\n      // 中间有一个文本字符串\n      // {{name}} hello {{age}} age\n      // lastIndex就是{{name}}的结尾位置，index就是{{name}}的开头位置\n      if (index > lastIndex) {\n        // 把中间的hello内容放到tokens中\n        tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n      }\n\n      tokens.push(`_s(${match[1].trim()})`);\n      lastIndex = index + match[0].length;\n    }\n\n    // 最后的文本字符串\n    // {{name}} hello {{age}} age中的age\n    // 从{{age}}的结束位置截取到最后\n    if (text.length > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex)));\n    }\n\n    // console.log(tokens);\n\n    return `_v(${tokens.join(\"+\")})`;\n  }\n}\n\n// 生成儿子节点\nfunction getChildren(el) {\n  const children = el.children;\n  if (children) {\n    return `${children.map((c) => gen(c)).join(\",\")}`;\n  } else {\n    return false;\n  }\n}\n\n// 生成属性\n// attrs [{name: 'id', value: 'wapper'}, {name: 'style', value: 'color: red; font-size: 50px'}]\nfunction genProps(attrs) {\n  let str = \"\";\n  for (let i = 0; i < attrs.length; i++) {\n    const attr = attrs[i];\n    // 如果attr名称是style\n    // {name: 'style', value: 'color: red; font-size: 50px'}\n    // 'color: red; font-size: 50px' => {color: red, font-size: 50px}\n    if (attr.name === \"style\") {\n      let obj = {};\n      attr.value.split(\";\").forEach((item) => {\n        let [key, value] = item.split(\":\");\n        obj[key] = value;\n      });\n      attr.value = obj;\n    }\n    // JSON.stringify把vue转成字符串\n    str += `${attr.name}:${JSON.stringify(attr.value)},`;\n  }\n  return `{${str.slice(0, -1)}}`;\n}\n\n// 生成code\nfunction codegen(el) {\n  // console.log(\"el\", el);\n\n  // 生成改节点的孩子，如果有孩子就加个,没孩子就不加了\n  let children = getChildren(el);\n\n  let code = `_c('${el.tag}', ${\n    el.attrs.length > 0 ? genProps(el.attrs) : \"undefined\"\n  }${children ? `,${children}` : \"\"}\n  )`;\n\n  return code;\n}\n\nexport function compileToFunctions(template) {\n  // console.log(template);\n\n  // 1. 将template转换成AST语法树\n  let ast = parseHTML(template);\n  // console.log(ast);\n\n  // 2. 生成render方法，render方法执行后返回的结果就是虚拟DOM\n  let code = codegen(ast);\n  // console.log(\"code\", code);\n\n  // 模版引擎的原理： with + new Function\n  // _c('div',{style:{color:'red'}},_v('hello'+_s(name)),_c('span',undefined,''))\n  // 用with？为了取值方便；解决_c _v _s从哪儿取的问题，不用都得vm._c vm._v vm._s了\n  // 为啥是this而不是vm? render函数被谁调用就是谁； this是谁就从谁的上面取_c _v _s\n  let render = `with(this){return ${code}}`;\n  let renderFn = new Function(render);\n  // 生成render函数，需要调用；分成两块：生成函数、调用函数\n  return renderFn;\n}\n\n// 最终的render函数\n/*\nfunction render() {\n  with (this) {\n    _c(\n      \"div\",\n      { style: { color: \"red\" } },\n      _v(\"hello\" + _s(name)),\n      _c(\"span\", undefined, \"\")\n    );\n  }\n}\n*/\n\n// render函数调用绑定作用域\n// render.call(vm);\n","// 策略模式\nconst strats = {};\nconst LIFECYCLES = [\"beforeCreate\", \"created\"];\nLIFECYCLES.forEach((hook) => {\n  strats[hook] = function (p, c) {\n    //子存在\n    if (c) {\n      // 子存在，父也存在（父存在那么父就是数组），就把子和父拼在一起\n      if (p) {\n        return p.concat(c);\n      } else {\n        // 子存在但是父不存在，则把儿子包装成数组\n        return [c];\n      }\n    } else {\n      // 子不存在只有父，直接返回父\n      return p;\n    }\n  };\n});\n\n// data的props merge策略\n// strats.data = function (p, c) {};\n\n// 计算属性的props merge策略\n// strats.computed = function (p, c) {};\n\n// 自身组件components和全局组件Vue.options.components的merge策略：优先找自己的，自己没有再找父亲身上的\nstrats.components = function (p, c) {\n  // 以父亲p为原型创建一个对象res.__proto = {xxx: {}}\n  // 父亲p的原型上维护着某个ID对应的全局组件\n  let res = Object.create(p);\n  // 如果子存在\n  if (c) {\n    // 把儿子的key添加到新创建出来的对象res上，达到儿子上有就先用儿子上的key，没有就从父亲的原型上取\n    for (let key in c) {\n      res[key] = c[key];\n    }\n  }\n\n  return res;\n};\n\n// ...剩下的策略\n\nexport function mergeOptions(parent, child) {\n  let options = {};\n\n  // 不能这么做，这么做合并不出来数组；以为直接覆盖了 {created: [fn, fn]}\n  // let options = { ...parent, ...child };\n\n  // 先遍历父的所有key\n  for (const key in parent) {\n    if (parent.hasOwnProperty(key)) {\n      mergeField(key);\n    }\n  }\n\n  // 再遍历父亲上没有的儿子上的key\n  for (const key in child) {\n    // 父亲上不存在的key\n    if (!parent.hasOwnProperty(key)) {\n      mergeField(key);\n    }\n  }\n\n  function mergeField(key) {\n    // 策略上有就走策略模式，没有就走默认\n    if (strats[key]) {\n      options[key] = strats[key](parent[key], child[key]);\n    } else {\n      // 策略没有提供，就走默认策略；以儿子为主\n      // 优先考虑儿子上的属性，再采用父亲的属性\n      options[key] = child[key] || parent[key];\n    }\n  }\n\n  return options;\n}\n","import { mergeOptions } from \"./utils\";\n\nexport function initGlobalAPI(Vue) {\n  // Vue的静态属性\n  Vue.options = {\n    _base: Vue, // 存储Vue构造函数，方便在其他地方去\n  };\n\n  // Vue的静态方法，把选项合并到了Vue.options上\n  Vue.mixin = function (mixin) {\n    // this是谁？\n    // 我们期望将用户的选项mixin和全局的Vue.options按照一定的策略合并\n    // 第一次 全局空对象{} 和 用户传的{created: function(){}}合并 => {created: [fn]}\n    // 第二次 第一次合并的结果{created: [fn]} 和 用户传的{created: function(){}}合并  => {created: [fn, fn]}\n    this.options = mergeOptions(this.options, mixin);\n    // 为了链式调用\n    return this;\n  };\n\n  // Vue的静态方法，生成一个组件并且对组件进行初始化\n  // 可以手动创建组件并挂载\n  Vue.extend = function (options) {\n    // 根据用户的参数最终返回一个构造函数，当做一个组件来使用，可以new一个实例\n    function Sub(options = {}) {\n      // this是Sub的实例，Sub的实例上没有_init方法，但是沿着原型链找能找到\n      // 调用Vue上的初始化方法，默认对子类进行初始化操作\n      this._init(options);\n    }\n\n    // 通过Sub的prototype能找到Vue的prototype\n    // Sub.prototype.__proto__ == Vue.prototype；但是需要注意下面的constructor的指向问题\n    Sub.prototype = Object.create(Vue.prototype);\n    // 把 Sub.prototype.constructor从Vue指回到Sub\n    Sub.prototype.constructor = Sub;\n    // 保存用户传递的options\n    // 希望将用户传递的参数和全局的Vue.options合并\n    Sub.options = mergeOptions(Vue.options, options);\n\n    return Sub;\n  };\n\n  // 全局组件；类比全局指令Vue.options.directives = {};\n  Vue.options.components = {};\n  Vue.component = function (id, definition) {\n    // 如果definition是函数，说明已经用Vue.extend包装过了，某则需要包装下\n    definition =\n      typeof definition === \"function\" ? definition : Vue.extend(definition);\n    // 在全局上标识组件\n    Vue.options.components[id] = definition;\n\n    console.log(Vue.options.components);\n  };\n}\n","// 我们希望重新数组的部分方法\n// 思路： 改变原型链、AOP函数劫持：内部调用原本的方法前后新加逻辑\n\n// 获取数组的原型\nlet oldArrayProtoMethods = Array.prototype;\n\n// 基于Array.prototype创建一个新的对象\n// 让数组类型的value的__proto__指向下面的对象，等于修改了原型链\n// arrayMethods.__proto__ = oldArrayProtoMethods;\n// value.__proto__ == arrayMethods\nexport let arrayMethods = Object.create(oldArrayProtoMethods);\n\n// 所有的变异方法7个：能修改原数组的方法： 对头（尾）\n// concat、slice不能修改原数组\nlet methods = [\"push\", \"pop\", \"shift\", \"unshift\", \"reverse\", \"sort\", \"splice\"];\n\nmethods.forEach((method) => {\n  // arrayMethods上面的加的方法只会影响arrayMethods上面的方法，不会覆盖Array.prototype上的原本的方法\n  // 通过原型链找到了arrayMethods的push就不会继续去找Array.prototype上的push方法\n  // 重新arrayMethods上的7个方法\n  // arr.push(1,2,3)\n  arrayMethods[method] = function (...args) {\n    // 这里重写了数组的方法\n    // 旧方法: 在新的方法里面调用\n    // this就是arr\n    const result = oldArrayProtoMethods[method].apply(this, args); // 内部调用原来的方法，函数的劫持，面向切片变成\n\n    // console.log(\"array method: \", method);\n\n    // 底下为AOP的增加自己的逻辑\n\n    // this是arr，谁调用的push就是谁\n    // this就是Observer中的那个value\n    const ob = this.__ob__;\n    // 新增的数组\n    let inserted;\n    // push和unshift会新增数据，新增的数据也需要劫持\n    // splice也可能会新增数据\n    switch (method) {\n      case \"push\":\n      case \"unshift\":\n        inserted = args; // arr.unshift(1, 2, 3) // 新增的内容是一个数组\n        break;\n      case \"splice\":\n        inserted = args.slice(2); // arr.splice(0, 1, {a: 1}, {b: 2}) 第2个参数后面的参数是新增的内容是数组\n      default:\n        break;\n    }\n    // 对数组类型的数据进行观察劫持\n    if (inserted) {\n      // 对新增的数据（数组）再次进行观测劫持\n      ob.observeArray(inserted);\n    }\n\n    // 数组变化了，通知相应的watcher实现更新逻辑\n    ob.dep.notify();\n\n    return result;\n  };\n});\n","let id = 0;\n\n// 被观察者，属性就是被观察者；属性的值发生变化后会通知所有的观察者更新\n\n// 属性的dep要收集watcher\nclass Dep {\n  constructor() {\n    // 唯一id\n    this.id = id++;\n    // 这里存放着当前属性对应的watcher有哪些\n    this.subs = [];\n  }\n\n  // 保证dep和watcher都不重复，保证dep和watcher双向维护\n  depend() {\n    // 这里不希望放置不重复的watcher；而且不只是一个单向的关系，dep -> watcher\n    // 也得让wather记录dep\n    // this.subs.push(Dep.target);\n\n    // 我们希望dep和watcher相互维护各自的引用，相互记忆\n    // 把dep传给了watcher\n    Dep.target.addDep(this); // 让watcher记住dep，在watcher中记住dep的时候去了重同时也让dep记录了watcher\n\n    // dep和watcher是多对多的关系\n    // 一个属性在多个组件中使用 一个dep对应多个watcher\n    // 一个组件中有多个属性 一个watcher包含多个dep\n  }\n\n  addSubs(watcher) {\n    this.subs.push(watcher);\n  }\n\n  notify() {\n    // 告诉所有watcher更新\n    this.subs.forEach((watcher) => watcher.update());\n  }\n}\n\n// target为什么不挂载到原型上，反而是个静态变量呢？因为没必要通过实例来访问，只是一个作为一个全局变量\n// 静态属性 - 相当于全局变量\n// 记录\nDep.target = null;\n\n// 用栈来维护watcher\nlet stack = [];\n\n// 渲染watcher先入栈，然后计算属性watcher入栈\nexport function pushTarget(watcher) {\n  // 压栈\n  stack.push(watcher);\n  Dep.target = watcher;\n}\n\nexport function popTarget() {\n  // 出栈\n  stack.pop();\n  // 如果最后一个弹栈后，取最后一个就Dep.target = undefined\n  Dep.target = stack[stack.length - 1];\n}\n\nexport default Dep;\n","import { arrayMethods } from \"./array\";\nimport Dep from \"./dep\";\nclass Observer {\n  // 观测值\n  constructor(value) {\n    /**\n     * data() {\n     *    return {\n     *      arr: [1, 2, 3, { a: 1 }],\n     *      obj: { b: 1 },\n     *    };\n     *  },\n     */\n    // 给每个对象增加依赖收集: 给arr和boj增加依赖收集\n    this.dep = new Dep();\n\n    // 给所有响应式数据增加标识，并且可以在响应式上获取Observer实例上的方法\n    // 如果数据上已经有了__ob__标识，证明已经被代理过了\n    // 增加__ob__属性为this，目的是可以在value上取到this从而调用Observer类上的方法\n    // 等同于value.__ob__ = this；但是没有控制可以枚举性，会导致下面defineReactive的时候死循环\n    // 值是this，但是不可枚举，循环的时候无法获取，从而解决了死循环的问题\n    Object.defineProperty(value, \"__ob__\", {\n      enumerable: false,\n      configurable: false,\n      value: this,\n    });\n\n    if (Array.isArray(value)) {\n      // 重新数组的7个变异方法，为啥是变异方法，因为会修改原数组\n\n      // 需要保留数组原有的方法，并且可以重写部分方法\n      value.__proto__ = arrayMethods; // 重写数组原型方法\n      // 数组里面的对象引用类型也需要进行劫持\n      this.observeArray(value); // 如果数组中方的是对象，可以监控到对象的改变\n    } else {\n      // 遍历\n      this.walk(value);\n    }\n  }\n\n  // 循环递归（性能差的原因）对象，对对象的所有属性进行劫持\n  walk(data) {\n    // 让对象上的所有属性依次进行观测\n    let keys = Object.keys(data);\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let value = data[key];\n      // \"重新定义\"属性\n      defineReactive(data, key, value);\n    }\n  }\n\n  // 观测数组\n  observeArray(data) {\n    data.forEach((item) => observe(item));\n  }\n}\n\n// 对数组的每一项进行依赖收集\n// 深层次的嵌套会递归，递归多了性能会差，不存在的属性监控不到，存在的属性要重新方法；vue3 => proxy\nfunction dependArray(value) {\n  for (let i = 0; i < value.length; i++) {\n    let current = value[i];\n    current.__ob__ && current.__ob__.dep.depend();\n    // 如果item仍然是数组，递归进行依赖收集\n    if (Array.isArray(current)) {\n      dependArray(current);\n    }\n  }\n}\n\n// 要暴露的方法，所以不能放到Observer类里面\n// 闭包\nexport function defineReactive(data, key, value) {\n  // 深度属性劫持\n  // 如果value还是object类型，继续调用observe进行递归劫持\n  // 返回的childOb上有dep属性，用来收集依赖\n  let childOb = observe(value);\n\n  // 每一个属性都有一个dep\n  let dep = new Dep();\n\n  // 缺点：Object.defineProperty只能劫持已经存在的属性，对于新增的和删除的操作监听不到\n  // 所以vue中单独写了一些api如$set, $delete来实现属性的新增的和删除后，仍然能做到数据劫持\n  Object.defineProperty(data, key, {\n    get() {\n      // console.log(`get key ${key}`);\n      // 什么时候Dep.target会有值？模版中使用了的变量，在调用_render()方法的时候就会在Dep.target加上值\n      // 用到了的属性才会被收集，在data中定义了，但是视图组件中没有用到也不会被收集\n      if (Dep.target) {\n        // 让这个属性的收集器记住当前的watcher\n        dep.depend();\n        if (childOb) {\n          // 让数组和对象本身也要实现依赖收集\n          childOb.dep.depend();\n\n          // 如果当前value是数组，也需要对数组的每个成员进行依赖收集\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n\n      // 取值的时候会执行get\n      // 闭包，value不会销毁，能取得到\n      return value;\n    },\n    set(newValue) {\n      // 设值的时候会执行set\n      if (newValue == value) return;\n\n      // console.log(`set key ${key} ${newValue}`);\n\n      // 再次劫持\n      // 深度属性劫持\n      // 如果设置的属性的value仍然是对象，继续递归进行新增属性的响应式\n      observe(newValue);\n\n      value = newValue;\n\n      // 属性一变化，就通知更新\n      dep.notify();\n    },\n  });\n}\n\nexport function observe(data) {\n  // 对这个对象进行劫持\n\n  if (typeof data !== \"object\" || data === null) {\n    return; // 只对对象进行劫持\n  }\n\n  // data上有__ob__标识证明已经被观察过了，直接返回原本的Observer就可以了\n  if (data.__ob__ instanceof Observer) {\n    return data.__ob__;\n  }\n\n  // 如果一个对象被劫持过了，那就不需要再被劫持了（需要判断一个对象是否被劫持过，可以添加一个实例，用实例来判断是否被劫持过）\n  return new Observer(data);\n}\n","import Dep, { popTarget, pushTarget } from \"./dep\";\n\n// 观察者模式\n// Watcher观察者，观察某个属性，某个属性的值发生变化后 观察者就update\n// 每个属性有一个dep, 属性就是被观察者；属性的值发生变化后会通知所有的观察者更新\n\n// watcher的id\nlet id = 0;\n\n// 1) 当我们创建渲染watcher的时候我们把当前的渲染watcher放到 Dep.target上\n// 2) this.getter()会调用_render()方法，就会走到属性的get方法上\n\n// 不同组件有不同的watcher，目前只有一个，渲染根实例的\nclass Watcher {\n  constructor(vm, exprOrFn, options, cb) {\n    // 唯一标识符\n    this.id = id++;\n    // 组件实例\n    this.vm = vm;\n    // 渲染watcher\n    this.renderWatcher = options;\n\n    if (typeof exprOrFn === \"string\") {\n      // 字符串转函数；不要用箭头函数，避免作用域问题\n      this.getter = function () {\n        return vm[exprOrFn]; // vm.firstname\n      };\n    } else {\n      // callback\n      this.getter = exprOrFn; // getter意味着调用这个函数可以发生取值操作\n    }\n\n    // 记录dep\n    // watcher为什么要记录deps?\n    // 1. 后续实现计算属性会用到\n    // 2. 一些清理工作需要用到: 当组件卸载的时候会把该组件的所有依赖deps清除掉\n    this.deps = [];\n    this.depsId = new Set();\n    // callback回调函数\n    this.cb = cb;\n    // 懒执行\n    this.lazy = options.lazy;\n    // 缓存值，脏值检测；lazy为true的话dirty就是true；\n    this.dirty = this.lazy;\n    // 用户自定watcher\n    this.user = options.user;\n\n    // 如果lazy为true, get不会立即执行了\n    // oldValue\n    this.value = this.lazy ? undefined : this.get();\n  }\n\n  evaluate() {\n    // 获取到用户函数fn的返回值，并且标识为不脏\n    this.value = this.get();\n    this.dirty = false;\n  }\n\n  get() {\n    // 先把当前的watcher放到 Dep.target上\n    // A组件渲染的时候会把A组件的watcher放上来，B组件渲染的时候会把B组件的watcher放上来，\n    // Dep.target = this;\n    pushTarget(this);\n    // 调用vm._update(vm._render()) 就会去vm上取name和age的值\n    const value = this.getter.call(this.vm);\n    // 渲染完毕后就清空\n    // Dep.target = null;\n    popTarget();\n    // 计算属性的getter执行后的返回值，渲染watcher的fn没有返回值\n    return value;\n  }\n\n  // 一个组件 对应着多个属性 重复的属性不应该重复记录 name可能会被引用几次\n  addDep(dep) {\n    let depId = dep.id;\n    if (!this.depsId.has(depId)) {\n      this.deps.push(dep);\n      this.depsId.add(depId);\n      // watcher记住了dep而且去重了，此时dep也记住了watcher\n      dep.addSubs(this);\n    }\n  }\n\n  depend() {\n    let i = this.deps.length;\n    while (i--) {\n      // 让计算属性watcher也收集渲染watcher\n      this.deps[i].depend();\n    }\n  }\n\n  update() {\n    // console.log(\"update\");\n\n    // 执行多次，修改为下面的方面\n    // 重新渲染\n    // this.get();\n    // 如果是计算属性\n    if (this.lazy) {\n      // 依赖得值发生变化了，就标识计算属性是脏值了\n      this.dirty = true;\n    } else {\n      // 解决修改属性执行多次，把watcher放到队列中，然后一次执行\n      queueWatcher(this);\n    }\n  }\n\n  // 真实的渲染\n  run() {\n    let oldValue = this.value;\n    // console.log(\"run\");\n    // 渲染的时候使用最新的vm来渲染的\n    let newValue = this.get(); // vm.name = 最后一次的值\n    // 如果是用户watcher还需要调用回调并传入newValue和oldValue\n    if (this.user) {\n      this.cb.call(this.vm, newValue, oldValue);\n    }\n  }\n}\n\n// 用于存放watcher的队列\nlet queue = [];\n// 类似set防止重复存放watcher，因为一个组件依赖多个属性\nlet has = {};\n// 防抖，只执行最后一次\nlet pending = false;\n\n// 异步批处理\nfunction flushSchedulerQueue() {\n  // 拷贝一份，不要影响原来的watcher的queue\n  let flushQueue = queue.slice(0);\n\n  // clear清理工作\n  // 清理工作为什么放到前面？pending为false的话如果刷新中还有新的任务过来的话，就可以放到队列中\n  queue = [];\n  has = {};\n  pending = false;\n  // 在刷新的过程中如果还有新的watcher，会重新放到queue中\n  flushQueue.forEach((q) => q.run());\n}\n\nfunction queueWatcher(watcher) {\n  const id = watcher.id;\n  if (!has[id]) {\n    has[id] = true;\n    queue.push(watcher);\n    // console.log(\"watcher queue\", queue);\n    // 不管我们的update执行多少次，但是最终只执行一轮刷新操作\n    // 第一个属性过来就设置定时器，第二、三个属性过来的时候就不设置定时器了\n    if (!pending) {\n      // 开启一个定时器，异步执行刷新操作\n      setTimeout(flushSchedulerQueue, 0);\n      // pending为true以后就不能再次添加setTimeout了\n      pending = true;\n    }\n  }\n}\n\n// 封装异步方案，供用户使用和框架内部使用\n// 外部用户使用的时候可以连续写多个vm.$nextTick(() => {})，所以也需要维护队列\nlet callbacks = [];\nlet waiting = false;\n\n// flushCallbacks是异步执行的\nfunction flushCallbacks() {\n  let cbs = callbacks.slice(0);\n  waiting = false;\n  callbacks = [];\n  cbs.forEach((cb) => cb());\n}\n\n// nextTick并不是创建异步任务，而是把异步任务维护到了队列中\n// nextTick只会开启一次异步任务\n// nextTick是异步么？既有同步，又有异步；同步就是把异步任务维护到了队列中，异步就是flushCallbacks是异步执行的\n\n// nextTick没有直接使用某一个api,而是做了优雅的降级\n// 内部优先采用promise(ie不兼容)、和promise.then同等的MutationObserver h5的api；可以考虑ie专享的setImmediate；最后才是setTimout定时器\n// 前面的几个api都是微任务，比setTimout执行的时机快，能更快的看到页面刷新完成\n// setTimout要开启一个新的线程，promise.then只是异步执行代码，性能开销要小\n\nlet timerFunc = null;\n\nif (Promise) {\n  timerFunc = () => {\n    Promise.resolve().then(flushCallbacks);\n  };\n} else if (MutationObserver) {\n  let observer = new MutationObserver(flushCallbacks);\n  let textNode = document.createTextNode(1);\n  // 观察textNode的文本内容发生变化，变化后就执行回调flushCallbacks\n  observer.observe(textNode, {\n    characterData: true,\n  });\n  timerFunc = () => {\n    textNode.textContent = 2;\n  };\n} else if (setImmediate) {\n  timerFunc = () => {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  timerFunc = () => {\n    setTimeout(flushCallbacks);\n  };\n}\n\nexport function nextTick(cb) {\n  // 把任务维护到队列中不是异步的\n  callbacks.push(cb);\n  if (!waiting) {\n    timerFunc();\n    waiting = true;\n  }\n}\n\n// 要给每个属性加一个dep, 目的就是收集watcher\n// 一个视图(视图就是组件)中有多个属性，（n个属性对应一个视图） n个dep对应一个watcher\n// 一个属性对应多个视图组件 1个dep对应多个watcher\n// dep和watcher是多对多的关系\n\nexport default Watcher;\n\n// 一个组件对应一个watcher；\n// 不同的组件有不同的watcher\n// 一个页面中多个组件，对应多个watcher；某个属性变化了，只会通知依赖了该属性的watcher去更新页面\n\n// 组件化的目的是什么？\n// 可复用、方便维护、局部刷新\n// 一个组件一个watcher, 通过拆分组件来减少刷新的范围，某个属性变化了，只会通知依赖了该属性的watcher也就是组件去更新\n","import { observe } from \"./observe\";\nimport Watcher, { nextTick } from \"./observe/watcher\";\nimport Dep from \"./observe/dep\";\n\nexport function initState(vm) {\n  const opts = vm.$options; // 获取所有的选项\n\n  // data初始化\n  if (opts.data) {\n    initData(vm);\n  }\n\n  // 初始化计算属性\n  if (opts.computed) {\n    initComputed(vm);\n  }\n\n  // 初始化watch方法\n  if (opts.watch) {\n    initWatch(vm);\n  }\n}\n\n// 数据代理\nfunction proxy(vm, target, key) {\n  // vm.name\n  Object.defineProperty(vm, key, {\n    get() {\n      // => vm._data.name\n      return vm[target][key];\n    },\n    set(newValue) {\n      vm[target][key] = newValue;\n    },\n  });\n}\n\n// 初始化data\nfunction initData(vm) {\n  let data = vm.$options.data; // data可能是函数和对象\n  // 根组件可以是function也可以对象，组件必须是函数\n  data = typeof data === \"function\" ? data.call(vm) : data; // data是用户返回的对象\n  // 将data挂载到vm的_data，和vm上直接可以取到属性的proxy不一样\n  vm._data = data;\n  // 数据劫持 vue2用的是Object.defineProperty\n  observe(data);\n\n  // vm.xxx =>(代理到)  vm._data.xxx\n  for (let key in data) {\n    proxy(vm, \"_data\", key);\n  }\n}\n\n// 初始化computed\nfunction initComputed(vm) {\n  let computed = vm.$options.computed;\n  // 按计算属性得key存放每个计算属性watcher\n  // 将计算属性watchers保存到vm上\n  const watchers = (vm._computedWatchers = {});\n\n  for (const key in computed) {\n    if (Object.hasOwnProperty.call(computed, key)) {\n      const userDef = computed[key];\n\n      // 创建计算属性Watcher\n      // 我们需要监控计算属性中get的变化，重新计算computed的get方法求新值\n      let fn = typeof userDef === \"function\" ? userDef : userDef.get;\n      // 直接new Watcher的时候就会执行fn方法；渲染Watcher创建的时候就需要执行fn\n      // lazy懒执行，计算属性watcher不能立即执行fn\n      // 计算属性watcher的fn啥时候执行呢？使用fullname的时候才执行，就是渲染watcher的fn执行的时候获取了计算属性的值才会执行\n      /**\n       *  fullname() {\n       *    console.log(\"run fullname\");\n       *    return this.firstname + this.lastname;\n       *  },\n       */\n      // 将属性和watcher对应起来\n      // 计算属性watcher不会导致页面更新\n      watchers[key] = new Watcher(vm, fn, { lazy: true });\n\n      // 给vm定义计算属性key\n      defineComputed(vm, key, userDef);\n    }\n  }\n}\n\nfunction defineComputed(target, key, userDef) {\n  const getter = typeof userDef === \"function\" ? userDef : userDef.get;\n  const setter = userDef.get || (() => {});\n\n  // console.log(getter);\n  // console.log(setter);\n\n  // 给vm定义属性\n  Object.defineProperty(target, key, {\n    get: createComputedGetter(key), // 包装一下get方法\n    set: setter,\n  });\n}\n\n// 每次计算属性取值都会走到get方法\n// 计算属性不会依赖收集，只会让自己的依赖属性去收集依赖\nfunction createComputedGetter(key) {\n  // 我们需要检测是否执行这个getter\n  return function () {\n    // 获取对应属性的watcher\n    const watcher = this._computedWatchers[key];\n    // 如果是脏的就去执行 用户传人的函数\n    if (watcher.dirty) {\n      // 计算属性求值一次后dirty就为false了，下次就不重新求值了，直接返回上次的结果\n      watcher.evaluate();\n    }\n\n    // 计算属性求值后，如果Dep.target还有值\n    // 计算属性watcher出栈后，还要渲染watcher,我们应该让计算属性watcher里面的属性，也去收集上一层的渲染watcher\n    if (Dep.target) {\n      watcher.depend();\n    }\n    // 最后返回的是watcher上的value\n    return watcher.value;\n  };\n}\n\nfunction createWatcher(vm, key, handler) {\n  // 字符串、函数；数组已经在上层处理过了；我们暂时不考虑对象\n  if (typeof handler === \"string\") {\n    handler = vm.$options.methods[handler];\n  }\n\n  // $vm.$watch()\n  return vm.$watch(key, handler);\n}\n\n// 初始化watch\nfunction initWatch(vm) {\n  let watch = vm.$options.watch;\n  // console.log(\"initWatch\", watch);\n  for (let key in watch) {\n    // handler分字符串、函数、数组\n    // vue中handler还可能是对象；我们的实现中先不考虑\n    /***\n     * watch: {\n     *   firstname: {\n     *      handler: function() {\n     *      },\n     *      immediate: true\n     *   }\n     * }\n     *\n     */\n    const handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (let i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nexport function initSateMixin(Vue) {\n  // 扩展$nextTick方法\n  Vue.prototype.$nextTick = nextTick;\n\n  // watch最终调用的$watch方法\n  // options参数可以是 dep: true深度监听;immediate立即执行\n  Vue.prototype.$watch = function (exprOrFn, cb, options = {}) {\n    // console.log(\"$watch\", exprOrFn, cb);\n\n    // 'firstname' 字符串需要转换成() => vm.firstname；在什么地方转？在Watcher里面转\n    // 当firstname变化的时候，就执行cb\n    // { user: true }用户自定义的watcher\n    new Watcher(this, exprOrFn, { user: true }, cb);\n  };\n}\n","// 创建元素的虚拟节点\n//  _h() _c()方法\n\n// 判断是否是原生的html 元素标签\n// 模板编译过程中都是标签，my-button也是一个字符串，如何才能区分是h5内置的标签还是用户自定义组件标签名？\nconst isReservedTag = (tag) => {\n  return [\"a\", \"div\", \"p\", \"button\", \"ul\", \"li\", \"span\"].includes(tag);\n};\n\nexport function createElementVNode(vm, tag, data, ...children) {\n  if (data == null) {\n    data = {};\n  }\n  // react是叫props；vue里是data\n  let key = data.key;\n  if (key) {\n    delete data.key;\n  }\n  if (isReservedTag(tag)) {\n    // 创建一个原生的H5标签的虚拟DOM\n    return vnode(vm, tag, data, key, children);\n  } else {\n    // 创建一个自定义组件的虚拟DOM\n\n    // Ctor就是组件的定义：可能是一个Sub类，还有可能是组件的obj类型{template: '<div>xxxx</div>'}\n    let Ctor = vm.$options.components[tag];\n\n    return createComponentVNode(vm, tag, data, key, children, Ctor);\n  }\n}\n\n// 创建组件的虚拟节点\nexport function createComponentVNode(vm, tag, data, key, children, Ctor) {\n  // 对象类型{template: '<div>xxxx</div>'需要调用Vue.extend()方法\n  // 那么问题来了？咋么样才能拿到Vue呢？\n  if (typeof Ctor === \"object\") {\n    // console.log(vm.$options._base);\n    // vm.$options._base上维护着Vue\n    Ctor = vm.$options._base.extend(Ctor);\n  }\n\n  data.hook = {\n    init() {\n      // 稍后创建真实节点的时候，如果是组件则调用此init方法\n    },\n  };\n\n  return vnode(vm, tag, data, key, children, null, { Ctor });\n}\n\n// 创建文本的虚拟节点\n// _v()\nexport function createTextVNode(vm, text) {\n  return vnode(vm, undefined, undefined, undefined, undefined, text);\n}\n\n// 虚拟节点vnode\n// key很重要dom diff\nfunction vnode(vm, tag, data, key, children, text, componentOptions) {\n  // vnode上维护了vm属性\n  return {\n    vm,\n    tag,\n    data,\n    key,\n    children,\n    text,\n    componentOptions, // 组件的构造函数\n  };\n}\n\n// AST和VDom一样么?\n// 区别一：描述的范围不一样\n// VDOM和AST很像，但是他描述的信息更多\n// AST可以描述 js css html；描述语言本身 https://astexplorer.net/\n// VDOM只能描述dom\n// 区别二：是否可以增加一些属性\n// AST是语法层面的转化，描述的是语法本身，不可以增加一些属性，原本有什么就转换什么\n// VDom是描述DOM的元素，可以增加一些自定义属性，例如事件、指令、插槽\n\nexport function isSameVnode(vnode1, vnode2) {\n  return vnode1.tag === vnode2.tag && vnode1.key === vnode2.key;\n}\n","import { isSameVnode } from \"./index\";\n\n// 把虚拟DOM转换成真实DOM\nexport function createElm(vnode) {\n  let { tag, children, key, data, text } = vnode;\n  // 根据标签名tag来创建原生元素\n  // 标签\n  if (typeof tag === \"string\") {\n    // 虚拟节点上挂真实DOM节点\n    // 这里将虚拟DOM节点和真实DOM节点对应起来，后续如果修改属性了，可以找到真实DOM\n    vnode.el = document.createElement(tag);\n    // 没有老的props\n    patchProps(vnode.el, {}, data);\n    // 处理儿子\n    children.forEach((child) => {\n      // 儿子需要append到当前的el中\n      return vnode.el.appendChild(createElm(child));\n    });\n  } else {\n    vnode.el = document.createTextNode(text);\n  }\n  return vnode.el;\n}\n\n// 比较props\n// el 当前的真实节点\n// oldProps 老的属性\n// newProps 新的属性\n// 1. 老的有新的没有，就需要删掉老的\n// 2. 老的没有新的有，就需要追加\n// 3. 老的有新的也有，就替换成新的属性值\nexport function patchProps(el, oldProps = {}, newProps = {}) {\n  // 1. 老的有新的没有，就需要删掉老的\n  // 属性 <div a=1\n  for (let key in oldProps) {\n    if (!newProps[key]) {\n      el.removeAttribute(key);\n    }\n  }\n  // 1. 老的有新的没有，就需要删掉老的\n  // style属性 <div a=1 style=\"color: red;\"\n  let oldStyle = oldProps.style;\n  let newStyle = newProps.style;\n  for (let key in oldStyle) {\n    if (!newStyle[key]) {\n      el.style[key] = \"\";\n    }\n  }\n\n  // 2. 无论如何都要用新的覆盖掉老的；但是需要老的有新的没有的需要删掉，就是上面的逻辑\n  // 老的没有新的有，就需要追加\n  // 老的有新的也有，就替换成新的属性值\n  for (let key in newProps) {\n    if (key === \"style\") {\n      for (let styleName in newProps.style) {\n        el.style[styleName] = newProps.style[styleName];\n      }\n    } else if (key === \"class\") {\n      el.className = newProps.class;\n    } else {\n      // 给这个元素添加属性 值就是对应的值\n      el.setAttribute(key, newProps[key]);\n    }\n  }\n}\n\n// 首次渲染和DOM DIFF\nexport function patch(oldVnode, vnode) {\n  // oldVnodes是el，原生DOM就是首次渲染\n  const isRealElement = oldVnode.nodeType;\n  if (isRealElement) {\n    // 首次渲染\n    // 获取真实DOM\n    const oldElm = oldVnode;\n    // 获取真实DOM的父容器\n    const parentElm = oldElm.parentNode;\n\n    let el = createElm(vnode);\n\n    // 先把新的节点插入到老节点的下面\n    parentElm.insertBefore(el, oldElm.nextSibling);\n    // 再删除老节点\n    parentElm.removeChild(oldVnode);\n\n    return el;\n  } else {\n    // DOM DIFF\n    // 1. 两个节点不是同一个节点就直接删除老的换上新的(没有对比了)\n    // 2. 两个节点是同一个节点(判断节点tag和key) 比较两个节点的属性是否有差异（复用老的节点，将差异的属性更新）\n    // 3. 节点比较完毕就要比较两人的儿子\n    return patchVnode(oldVnode, vnode);\n  }\n}\n\nfunction patchVnode(oldVnode, vnode) {\n  // tag === tag && key === key\n  if (!isSameVnode(oldVnode, vnode)) {\n    let el = createElm(vnode);\n    // 老节点的父亲替换自己的儿子为新的节点\n    oldVnode.el.parentNode.replaceChild(el, oldVnode.el);\n    return el;\n  }\n\n  // 文本节点的tag和key都是undefined；undefined === undefined\n  // 文本节点：需要比较下文本的内容\n  // 复用老的文本节点的元素\n  let el = (vnode.el = oldVnode.el);\n  if (!oldVnode.tag) {\n    if (oldVnode.text !== vnode.text) {\n      // 用新的文本替换掉老的文本\n      oldVnode.el.textContent = vnode.text;\n    }\n  }\n\n  // 是标签 同一个标签需要比对标签的属性\n  patchProps(el, oldVnode.data, vnode.data);\n\n  // 比较儿子节点 比较的时候\n  // 1. 一方有儿子一方没有儿子 老的有新的没有就把老的儿子节点全都删掉；老的没有新的有就需要把新的儿子都追加到老的里面\n  // 2. 两方都有儿子\n\n  let oldChildren = oldVnode.children || [];\n  let newChildren = vnode.children || [];\n\n  if (oldChildren.length > 0 && newChildren.length > 0) {\n    // 完整的diff算法，需要比较两人的儿子\n    updateChildren(el, oldChildren, newChildren);\n  } else if (oldChildren.length === 0 && newChildren.length > 0) {\n    // 没有老的，有新的的；用新的append到el里面\n    mountChildren(el, newChildren);\n  } else if (oldChildren.length > 0 && newChildren.length === 0) {\n    // 老的有，新的没有；就删掉老的\n    // innerHTML清空孩子，也可以循环删除\n    // 源码中还需要考虑组件的情况，需要销毁组件\n    el.innerHTML = \"\";\n  }\n\n  return el;\n}\n\nfunction mountChildren(el, newChildren) {\n  for (let i = 0; i < newChildren.length; i++) {\n    el.appendChild(createElm(newChildren[i]));\n  }\n}\n\nfunction updateChildren(el, oldChildren, newChildren) {\n  // 比较新旧老儿子，为了增高性能，我们会有一些优化手段；不要从新的拿出来一个和老的挨个比\n  // 我们操作列表经常是 push pop shift unshift reverse sort等这些方法\n  // 我们需要针对这些场景做些优化： 不是在表头就是表尾操作，最差的是 reverse sort\n  // vue2采用的是双指针的方式，比较两个节点\n  // console.log(oldChildren, newChildren);\n  let oldStartIndex = 0;\n  let newStartIndex = 0;\n  let oldEndIndex = oldChildren.length - 1;\n  let newEndIndex = newChildren.length - 1;\n\n  let oldStartVnode = oldChildren[0];\n  let newStartVnode = newChildren[0];\n  let oldEndVnode = oldChildren[oldEndIndex];\n  let newEndVnode = newChildren[newEndIndex];\n  // console.log(oldStartVnode, oldEndVnode);\n\n  function makeIndexByKey(children) {\n    // 键值为key，值为索引\n    let map = {};\n    children.forEach((item, index) => {\n      map[item.key] = index;\n    });\n    return map;\n  }\n  // 将oldChildren转换成map映射表\n  // 对所有的孩子元素进行编号\n  let map = makeIndexByKey(oldChildren);\n\n  // 面试题：循环的时候为什么加key? 给动态列表添加key的时候劲量不要写index,因为索引前后都是以0开始，可能会发生错误复用\n  // &&有任何一个不满足则停止 ||有一个尾true就继续\n  while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) {\n    // 只要双方有一方头指针大于尾部指针则退出循环\n    // 只要有一方不满足条件就退出\n\n    // 在乱序比对中如果老的某个节点被标识为了undefined，则老的开始和结束节点在往后往前移动的过程中需要跳过\n    // 遇到undefined就跳过，最后会删除\n    if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex];\n    } else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex];\n    }\n\n    // 比较开头节点 头头比对\n    if (isSameVnode(oldStartVnode, newStartVnode)) {\n      // 如果是相同节点，则递归比较子节点\n      // 递归比较子节点\n      patchVnode(oldStartVnode, newStartVnode);\n      // 然后新旧头部指针后移一位\n      oldStartVnode = oldChildren[++oldStartIndex];\n      newStartVnode = newChildren[++newStartIndex];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      // 开头节点不相等就比较结尾节点 尾尾比较\n      // 比较结尾节点 尾尾比对\n      // 如果是相同节点，则递归比较子节点\n      patchVnode(oldEndVnode, newEndVnode);\n      // 然后新旧尾部指针前移一位\n      oldEndVnode = oldChildren[--oldEndIndex];\n      newEndVnode = newChildren[--newEndIndex];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      // 交叉比对： 头头不一样，尾尾不一样，就老头和新尾比，老尾和新头\n\n      // 尾移头\n\n      // abcd => dabc 尾部要移动到头部\n      // diff-7.jpeg\n\n      // 如果是相同节点，则递归比较子节点\n      patchVnode(oldEndVnode, newStartVnode);\n      // 复用老的节点： 把老的最后一个节点移动到老的开始节点的前面；把尾移动到了头部\n      // insertBefore具有移动性，会将原来的元素移动走\n      // 先移动元素在移动指针\n      el.insertBefore(oldEndVnode.el, oldStartVnode.el);\n      // 然后旧的尾部指针前移\n      oldEndVnode = oldChildren[--oldEndIndex];\n      // 然后新的头部指针后移\n      newStartVnode = newChildren[++newStartIndex];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      // 交叉比对： 头头不一样，尾尾不一样，就老头和新尾比，老尾和新头\n\n      // 头移尾\n\n      // abcd => bcda  头部移动到头尾部\n      // diff-8.jpeg\n\n      // 如果是相同节点，则递归比较子节点\n      patchVnode(oldStartVnode, newEndVnode);\n      // 复用老的节点： 把老的第一个节点移动到老的结束节点的下一个节点（null）后面；把头移动到了尾部\n      // oldEndVnode.el.nextSibling是null\n      // insertBefore具有移动性，会将原来的元素移动走\n      // insertBefore当第二个参数是null的时候相当于appendChild\n      el.insertBefore(oldStartVnode.el, oldEndVnode.el.nextSibling);\n      oldStartVnode = oldChildren[++oldStartIndex];\n      newEndVnode = newChildren[--newEndIndex];\n    } else {\n      // 乱序比对（头头、尾尾、头尾、尾头都比对不上）：这就优化不了了，肯定需要映射\n      // diff-11.jpeg\n      // 算法思路：\n      // 根据老的children做一个映射表；\n      // 用新的去找，找到则移动，并打个标识标识要删除（undefined）（不能删除，否则会导致数组塌陷）\n      // 找不到则创建新的添加并插入到头指针的前面（一直都是插入到头指针的前面）；\n      // 最后多余的就删除\n\n      // 用新的元素去老的中进行查找，如果找到则移动，找不到则直接插入\n      // 老的映射里面有我要移动的索引\n      let moveIndex = map[newStartVnode.key];\n      // 有的话做移动操作\n      if (moveIndex !== undefined) {\n        // 找到对应的虚拟节点复用\n        let moveVnode = oldChildren[moveIndex];\n        // 移动都是移动到老节点的开始节点的前面\n        el.insertBefore(moveVnode.el, oldStartVnode.el);\n        // 标识为undefined，表示这个节点已经移动走了，不能删除，否则会导致数组塌陷，因为循环的过程中删除会影响原本的数组长度\n        oldChildren[moveIndex] = undefined;\n        // 比较属性和递归比较子节点\n        patchVnode(moveVnode, newStartVnode);\n      } else {\n        // 老的中没有则创建一个新元素并插入到老节点的前面\n        el.insertBefore(createElm(newStartVnode), oldStartVnode.el);\n      }\n      // 新节点的开始节点向后移动\n      newStartVnode = newChildren[++newStartIndex];\n    }\n  }\n\n  // 退出上面循环： 有一方已经越界，有一方已经比较完毕\n  // diff-2.jpeg（新的后面多几个节点）和diff-4.jpeg（新的前面多几个节点） 都会走到这里\n  // diff-2.jpeg 如果老的节点oldStartIndex已经越界了，新的后面还有几个节点就插进去后面；比完后新的后面有多余的就插入到后面\n  // diff-4.jpeg 如果老的节点的oldEndIndex已经越界了，新的前面还有几个节点就插入到前面；比完后新的前面有多余的就插入到前面\n  if (newStartIndex <= newEndIndex) {\n    // newStartIndex和newEndIndex之间可能有一个节点，也可能多个节点\n    for (let i = newStartIndex; i <= newEndIndex; i++) {\n      // 这里可能是向后追加也可能是向前追加\n\n      let childEl = createElm(newChildren[i]);\n\n      /*\n      if (newChildren[++newEndIndex]) {\n        // diff-4.jpeg\n        // 头部插入，尾指针挪到了前面\n        el.insertBefore(childEl, newChildren[++newEndIndex].el);\n      } else {\n        // diff-2.jpeg\n        // 尾部插入，因为尾指针后面已经没有元素了\n        el.appendChild(createElm(newChildren[i]));\n      }\n      */\n\n      // 上面的简单写法\n      // 参照物\n      let anchor = newChildren[newEndIndex + 1]\n        ? newChildren[newEndIndex + 1].el\n        : null;\n      // anchor为null的时候则认为会是appendChild\n      el.insertBefore(childEl, anchor);\n    }\n  }\n\n  // diff-3.jpeg 如果新的已经越界，老的后面还剩几个就都删除\n  // 老的多了，老的有剩余\n  // 退出上面循环： 有一方已经比较完毕-新的比较完毕，老的有剩余\n  // 乱序比对的删除也会走到这里\n  // 如果有剩余则直接删除\n  if (oldStartIndex <= oldEndIndex) {\n    for (let i = oldStartIndex; i <= oldEndIndex; i++) {\n      // 虚拟节点上维护着el\n      let child = oldChildren[i];\n      // 因为可能在乱序比对的过程中标识成了undefined\n      if (child != undefined) {\n        // 虚拟节点上维护着el\n        parent.removeChild(child.el);\n      }\n    }\n  }\n}\n","import Watcher from \"./observe/watcher\";\nimport { createElementVNode, createTextVNode } from \"./vdom\";\nimport { patch } from \"./vdom/patch\";\n\nexport function initLifeCycle(Vue) {\n  // 把_render函数生成的虚拟DOM，生成真实DOM\n  Vue.prototype._update = function (vnode) {\n    // console.log(\"_update\", vnode);\n    const vm = this;\n    const el = vm.$el;\n\n    // 先取再赋值\n    // 是否存在_vnode\n    const preVnode = vm._vnode;\n    // 把组件第一次产生的虚拟节点保存到_vnode变量上\n    vm._vnode = vnode;\n    if (preVnode) {\n      // preVnode有值表示第二次渲染\n      vm.$el = patch(preVnode, vnode);\n    } else {\n      // preVnode没有值表示第一次渲染\n      // patch既有初始化的功能，又有更新的功能\n      vm.$el = patch(el, vnode);\n    }\n\n    // console.log(\"el\", el);\n\n    // // patch既有初始化的功能，又有更新的功能\n    // vm.$el = patch(el, vnode);\n  };\n\n  // 生成虚拟DOM\n  Vue.prototype._render = function () {\n    // console.log(\"_render\");\n    let vm = this;\n    // 渲染的时候会从实例vm上取值，我们就将属性和视图绑定在了一起\n    // 为什么要call?希望render函数里面的with的this指向vm\n    // 为啥要指向vm?因为vm上有name，有age\n    // console.log(vm.age, vm.name);\n    // let render = `with(this){return ${code}}`;\n    let vnode = vm.$options.render.call(vm); // 通过ast语法转以后生成的render函数\n    return vnode;\n  };\n\n  // 创建文本\n  //  _v(text),\n  Vue.prototype._v = function (text) {\n    return createTextVNode(this, text);\n  };\n\n  // 创建元素\n  // _c('div', {}, ...children)\n  Vue.prototype._c = function () {\n    return createElementVNode(this, ...arguments);\n  };\n\n  // 把传入的值val转成字符串\n  Vue.prototype._s = function (val) {\n    return val == null\n      ? \"\"\n      : typeof val === \"object\"\n      ? JSON.stringify(val)\n      : val;\n  };\n}\n\nexport function mountComponent(vm, el) {\n  // 这里的el是通过querySelector处理过的\n  vm.$el = el;\n  // 1. 调用render方法，生成虚拟DOM\n  // 2. 根据虚拟DOM，生成真实DOM\n\n  // vm._update(vm._render()); // vm.$options.render();\n\n  // 更新根组件\n  const updateComponent = function () {\n    vm._update(vm._render());\n  };\n\n  // 首次渲染的时候会收集依赖\n  // 更新的时候会再次收集\n  // updateComponent会立即执行\n  let watcher = new Watcher(vm, updateComponent, true); // true标识一个渲染watcher\n  // console.log(watcher);\n\n  // 2. 根据虚拟DOM，生成真实DOM\n\n  // 3. 把真实DOM插入到el元素中\n}\n\n// vue的核心：\n// 1）创建响应式数据\n// 2）模板转换成ast语法树\n// 3）将ast语法树转换成render函数, 调用render方法，生成虚拟DOM\n// 4）后续每次数据更新，只需要执行render函数，无需再次执行ast转换的过程\n\n// render函数会产生虚拟DOM(使用响应式数据)\n// 根据虚拟DOM，生成真实DOM\n\n// 调用钩子函数\nexport function callHook(vm, hook) {\n  const handlers = vm.$options[hook];\n  if (handlers) {\n    handlers.forEach((handler) => handler.call(vm));\n  }\n}\n","import { initState } from \"./state\";\nimport { compileToFunctions } from \"./compiler\";\nimport { callHook, mountComponent } from \"./lifecycle\";\nimport { mergeOptions } from \"./utils\";\n\nexport function initMixin(Vue) {\n  // 通过原型prototype给Vue增加init方法\n  Vue.prototype._init = function (options) {\n    // 用于初始化操作\n    // vue vm.$options就是获取用户的配置\n\n    // 我们使用vue的时候，$nextTick, $data, $attr...以$开头的都表示Vue的内置属性\n    const vm = this;\n    // 用全局options(Vue.options)和用户的options来合并merge；不用Vue.options是因为可能是子类的Options例如Sub.options\n    // 我们定义的全局指令和过滤器等等都会挂载到实例上\n    vm.$options = mergeOptions(this.constructor.options, options); // 将用户的选项挂载到实例上\n\n    // 在initState之前调用beforeCreate\n    callHook(vm, \"beforeCreate\");\n\n    // 初始化状态；初始化计算属性；初始化watch\n    initState(vm);\n\n    // 在initState之后调用created\n    callHook(vm, \"created\");\n\n    if (options.el) {\n      vm.$mount(options.el); // 实现数据的挂载\n    }\n  };\n\n  // 挂载应用\n  Vue.prototype.$mount = function (el) {\n    const vm = this;\n    const options = vm.$options;\n    el = document.querySelector(el);\n\n    // 整体思想：不一定非得有render函数，没有render函数就用template编译成render函数\n    // 先查找有没有render函数\n    if (!options.render) {\n      // 没有render函数的话，再看下是否写了template，写了template就用写了的template\n      // 没有template采用el外部的html\n      let template = options.template;\n      // 没有写template但是写了el\n      if (!template && el) {\n        // 包括el在内的html就是template\n        template = el.outerHTML;\n      }\n\n      // 将模版template编译成render函数\n      const render = compileToFunctions(template); // render函数就是包含h(xxx)\n      options.render = render;\n    }\n\n    // 最终在这里就可以拿到options.render的函数\n    // runtime和runtimeWithComplier\n    // script引用的vue.global.js这个编译过程是在浏览器中执行的\n    // runtime运行时是不包含模板编译的，整个编译是在打包的过程中通过loader编译.vue文件的；\n    // 用runtime的时候不能使用template\n\n    // console.log(\"render\", options.render);\n\n    // 挂载组件\n    mountComponent(vm, el);\n  };\n}\n","import { compileToFunctions } from \"./compiler\";\nimport { initGlobalAPI } from \"./globalAPI\";\nimport { initMixin } from \"./init\";\nimport { initLifeCycle } from \"./lifecycle\";\nimport { initSateMixin } from \"./state\";\nimport { createElm, patch } from \"./vdom/patch\";\n\n// 将所有的方法都耦合在一起\nfunction Vue(options) {\n  // options就是用户的选项\n  this._init(options);\n}\n\ninitMixin(Vue); // 扩展了_init方法\ninitLifeCycle(Vue); // 扩展了生命周期方法 vm._update vm._render方法\ninitGlobalAPI(Vue); // 全局api的实现\ninitSateMixin(Vue); // 实现了$nextTick和$watch方法\n\n// ------------为了方便观察前后的虚拟节点--测试的\n\n/*\n\n// 1 新后面追加\n// let render1 = compileToFunctions(\n//   `<ul a=\"1\" style=\"color: red;\">\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//   </ul>`\n// );\n\n// 2 老的后面删除\n// let render1 = compileToFunctions(\n//   `<ul a=\"1\" style=\"color: red;\">\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//     <li key=\"D\">D</li>\n//     <li key=\"E\">E</li>\n//   </ul>`\n// );\n\n// 3 在前面追加\n// let render1 = compileToFunctions(\n//   `<ul a=\"1\" style=\"color: red;\">\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//   </ul>`\n// );\n\n// 4 老的前面删除\n// let render1 = compileToFunctions(\n//   `<ul a=\"1\" style=\"color: red;\">\n//     <li key=\"D\">D</li>\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//   </ul>`\n// );\n\n// 5 老的尾部移动到头部\n// let render1 = compileToFunctions(\n//   `<ul a=\"1\" style=\"color: red;\">\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//     <li key=\"D\">D</li>\n//   </ul>`\n// );\n\n// 6 老的头移动到尾部\n// let render1 = compileToFunctions(\n//   `<ul a=\"1\" style=\"color: red;\">\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//     <li key=\"D\">D</li>\n//   </ul>`\n// );\n\n// 7 命中特殊的场景优化 ABCD => DCBA 会移动三次\n// 头尾 尾头 同事处理了倒序和排序的情况\n// let render1 = compileToFunctions(\n//   `<ul a=\"1\" style=\"color: red;\">\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//     <li key=\"D\">D</li>\n//   </ul>`\n// );\n\n// 8\nlet render1 = compileToFunctions(\n  `<ul a=\"1\" style=\"color: red;\">\n    <li key=\"A\">A</li>\n    <li key=\"B\">B</li>\n    <li key=\"C\">C</li>\n    <li key=\"D\">D</li>\n  </ul>`\n);\n\nlet vm1 = new Vue({ data: { name: \"zuopf1\" } });\nlet preVnode = render1.call(vm1);\n\nlet el = createElm(preVnode);\ndocument.body.appendChild(el);\n\n// console.log(\"preVnode\", preVnode);\n\n// 1\n// let render2 = compileToFunctions(\n//   `<ul style=\"color: yellow;background:blue\">\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//     <li key=\"D\">D</li>\n//     <li key=\"E\">E</li>\n//   </ul>`\n// );\n\n// 2\n// let render2 = compileToFunctions(\n//   `<ul style=\"color: yellow;background:blue\">\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//   </ul>`\n// );\n\n// 3\n// let render2 = compileToFunctions(\n//   `<ul style=\"color: yellow;background:blue\">\n//     <li key=\"D\">D</li>\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//   </ul>`\n// );\n\n// 4\n// let render2 = compileToFunctions(\n//   `<ul style=\"color: yellow;background:blue\">\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//   </ul>`\n// );\n\n// 5\n// let render2 = compileToFunctions(\n//   `<ul style=\"color: yellow;background:blue\">\n//     <li key=\"D\">D</li>\n//     <li key=\"A\">A</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//   </ul>`\n// );\n\n// 6\n// let render2 = compileToFunctions(\n//   `<ul style=\"color: yellow;background:blue\">\n//     <li key=\"B\">B</li>\n//     <li key=\"C\">C</li>\n//     <li key=\"D\">D</li>\n//     <li key=\"A\">A</li>\n//   </ul>`\n// );\n\n// 7\n// let render2 = compileToFunctions(\n//   `<ul style=\"color: yellow;background:blue\">\n//     <li key=\"D\">D</li>\n//     <li key=\"C\">C</li>\n//     <li key=\"B\">B</li>\n//     <li key=\"A\">A</li>\n//   </ul>`\n// );\n\nlet render2 = compileToFunctions(\n  `<ul style=\"color: yellow;background:blue\">\n    <li key=\"B\">B</li>\n    <li key=\"M\">M</li>\n    <li key=\"A\">A</li>\n    <li key=\"P\">P</li>\n    <li key=\"C\">C</li>\n    <li key=\"Q\">Q</li>\n  </ul>`\n);\nlet vm2 = new Vue({ data: { name: \"zuopf2\" } });\nlet nextVnode = render2.call(vm2);\n// console.log(\"nextVnode\", nextVnode);\n\n// let newEl = createElm(nextVnode);\n// el.parentNode.replaceChild(newEl.el);\n\n// 直接更新: 直接用新的节点替换了老的节点\n// 直接替换的性能问题: console.log(dir(dom)) dom节点上有很多属性；获取dom并不消耗性能，重要的是\n// DOM Diff: 不是直接替换，而是比较两个人的区别之后再替换\n// Diff算法的思想：diff算法是一个平级比较的过程，父亲和父亲比，儿子和儿子比对\nsetTimeout(() => {\n  // let newel = createElm(nextVnode);\n  // el.parentNode.replaceChild(newel, el);\n  // DOM Diff\n  patch(preVnode, nextVnode);\n}, 1000);\n\n*/\n\nexport default Vue;\n"],"names":["ncname","qnameCapture","concat","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","stack","ELEMENT_TYPE","TEXT_TYPE","root","currentParent","createASTElement","tagName","attrs","tag","type","children","parent","start","element","push","end","pop","length","chars","text","replace","advance","n","substring","parseStartTag","match","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","defaultTagRE","gen","node","codegen","test","JSON","stringify","tokens","lastIndex","exec","index","slice","trim","join","getChildren","el","map","c","genProps","str","_loop","i","obj","split","forEach","item","_item$split","_item$split2","_slicedToArray","key","code","compileToFunctions","template","ast","render","renderFn","Function","strats","LIFECYCLES","hook","p","components","res","Object","create","mergeOptions","child","options","hasOwnProperty","mergeField","initGlobalAPI","Vue","_base","mixin","extend","Sub","arguments","undefined","_init","prototype","constructor","component","id","definition","console","log","oldArrayProtoMethods","Array","arrayMethods","methods","method","_len","args","_key","result","apply","ob","__ob__","inserted","observeArray","dep","notify","Dep","_classCallCheck","subs","_createClass","depend","target","addDep","addSubs","watcher","update","pushTarget","popTarget","Observer","defineProperty","enumerable","configurable","isArray","__proto__","walk","data","keys","defineReactive","observe","dependArray","current","childOb","get","set","newValue","_typeof","Watcher","vm","exprOrFn","cb","renderWatcher","getter","deps","depsId","Set","lazy","dirty","user","evaluate","call","depId","has","add","queueWatcher","run","oldValue","queue","pending","flushSchedulerQueue","flushQueue","q","setTimeout","callbacks","waiting","flushCallbacks","cbs","timerFunc","Promise","resolve","then","MutationObserver","observer","textNode","document","createTextNode","characterData","textContent","setImmediate","nextTick","initState","opts","$options","initData","computed","initComputed","watch","initWatch","proxy","_data","watchers","_computedWatchers","userDef","fn","defineComputed","setter","createComputedGetter","createWatcher","handler","$watch","initSateMixin","$nextTick","isReservedTag","includes","createElementVNode","vnode","Ctor","createComponentVNode","init","createTextVNode","componentOptions","isSameVnode","vnode1","vnode2","createElm","createElement","patchProps","appendChild","oldProps","newProps","removeAttribute","oldStyle","style","newStyle","styleName","className","setAttribute","patch","oldVnode","isRealElement","nodeType","oldElm","parentElm","parentNode","insertBefore","nextSibling","removeChild","patchVnode","replaceChild","oldChildren","newChildren","updateChildren","mountChildren","innerHTML","oldStartIndex","newStartIndex","oldEndIndex","newEndIndex","oldStartVnode","newStartVnode","oldEndVnode","newEndVnode","makeIndexByKey","moveIndex","moveVnode","childEl","anchor","initLifeCycle","_update","$el","preVnode","_vnode","_render","_v","_c","_s","val","mountComponent","updateComponent","callHook","handlers","initMixin","$mount","querySelector","outerHTML"],"mappings":"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"}